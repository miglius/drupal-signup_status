<?php
// $Id$

/**
 * @file
 * Implements signup statuses
 */

//////////////////////////////////////////////////////////////////////////////

define('SIGNUP_STATUS_MANAGE_PERMISSION', 'manage signup status codes');

//////////////////////////////////////////////////////////////////////////////
// Core API hooks

/**
 * Implementation of hook_perm().
 */
function signup_status_perm() {
  return array(SIGNUP_STATUS_MANAGE_PERMISSION);
}

/**
 * Implementation of hook_menu().
 */
function signup_status_menu() {
  $items['admin/settings/signup_status'] = array(
    'title' => 'Signup status',
    'description' => 'Configure signup status settings.',
    'page callback' => 'signup_status_admin_list',
    'access arguments' => array(SIGNUP_STATUS_MANAGE_PERMISSION),
    'file' => 'signup_status.admin.inc',
  );
  $items['admin/settings/signup_status/list'] = array(
    'title' => 'Status codes',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/signup_status/add'] = array(
    'title' => 'Add status code',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signup_status_admin_form', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'access arguments' => array(SIGNUP_STATUS_MANAGE_PERMISSION),
    'file' => 'signup_status.admin.inc',
  );
  $items['admin/settings/signup_status/edit'] = array(
    'title' => 'Configure status code',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signup_status_admin_form', 3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array(SIGNUP_STATUS_MANAGE_PERMISSION),
    'file' => 'signup_status.admin.inc',
  );
  $items['admin/settings/signup_status/delete'] = array(
    'title' => 'Configure status code',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signup_status_admin_delete', 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array(SIGNUP_STATUS_MANAGE_PERMISSION),
    'file' => 'signup_status.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_action_info().
 */
function signup_status_action_info() {
  return array(
    'signup_status_alter_action' => array(
      'type' => 'signup',
      'description' => t('Alter signup status'),
      'configurable' => TRUE,
    ),
  );
}

//////////////////////////////////////////////////////////////////////////////
// Views integration

/**
 * Implementation of hook_views_api().
 */
function signup_status_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'signup_status') .'/views',
  );
}

//////////////////////////////////////////////////////////////////////////////
// Actions integration

/**
 * Perform the action to alter the signup status of a given signup.
 */
function signup_status_alter_action(&$signup, $context) {
  $status_codes = signup_status_codes();
  $signup->status = $context['signup_status'];
  db_query("UPDATE {signup_log} SET status = %d WHERE sid = %d", $signup->status, $signup->sid);
  watchdog('action', 'Set status of %signup_label to %status_name.', array('%signup_label' => $signup->label, '%status_name' => $status_codes[$signup->status]['name']));
  _signup_status_change('update', $signup);
}

/**
 * Create the configuration form to select which signup status to use.
 */
function signup_status_alter_action_form($context) {
  $options = array();
  foreach (signup_status_codes() as $cid => $code) {
    if ($code['show_on_form']) {
      $options[$cid] = $code['name'];
    }
  }
  $form['signup_status'] = array(
    '#type' => 'select',
    '#title' => t('Signup status'),
    '#options' => $options,
  );
  return $form;
}

/**
 * Validate the form to select which signup status to use for the alter action.
 */
function signup_status_alter_action_validate($form, $form_state) {
  if ($form_state['values']['signup_status'] == 0) {
    form_set_error('signup_status', t('You must select a status.'));
  }
}

/**
 * Submit handler for the form to select which signup status to use.
 */
function signup_status_alter_action_submit($form, $form_state) {
  return array('signup_status' => $form_state['values']['signup_status']);
}

//////////////////////////////////////////////////////////////////////////////
// Signup integration
/**
 * Implementation of hook_signup_cancel().
 */
function signup_status_signup_cancel($signup, $node) {
  _signup_status_change('delete', $signup);
}

//////////////////////////////////////////////////////////////////////////////
// Signup form altering

/**
 * Helper function to generate the signup status form element.
 *
 * @param $current_status
 *   Optional code for the current signup status to use as the default.
 *
 * @return
 *   FormAPI array defining the signup status form element.
 */
function _signup_status_status_form_element($current_status = NULL) {
  $element = array();
  $options = array();
  foreach (signup_status_codes() as $cid => $code) {
    if ($code['show_on_form']) {
      $options[$cid] = $code['name'];
    }
  }
  if (!empty($options)) {
    if (!isset($current_status)) {
      $options = array(-1 => t('- Please choose -')) + $options;
    }
    $element = array(
      '#type' => 'select',
      '#title' => t('Status'),
      '#options' => $options,
      '#weight' => 1,
    );
    if (isset($current_status)) {
      $element['#default_value'] = $current_status;
    }
  }
  return $element;
}

/**
 * Alter the signup form to add a status selector, if available.
 */
function signup_status_form_signup_form_alter(&$form, $form_state) {
  $status_element = _signup_status_status_form_element();
  if (!empty($status_element)) {
    $form['collapse']['signup_status'] = $status_element;
    $form['collapse']['submit']['#weight'] = 2;
    $form['#validate'][] = 'signup_status_signup_form_validate_status';
    $form['#submit'][] = 'signup_status_alter_signup_form_submit';
  }
}

/**
 * Validate the status field on the altered signup form.
 */
function signup_status_signup_form_validate_status($form, $form_state) {
  if (!isset($form_state['values']['signup_status']) || $form_state['values']['signup_status'] == -1) {
    form_set_error('signup_status', t('You must select a valid status.'));
  }
}

/**
 * Handles submission of the altered signup form.
 */
function signup_status_alter_signup_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  if (isset($values['signup_status'])) {
    $sql = "SELECT * FROM {signup_log} WHERE uid = %d AND nid = %d";
    $args = array($values['uid'], $values['nid']);
    if (isset($values['signup_anon_mail'])) {
      $sql .= " AND anon_mail = '%s'";
      $args[] = $values['signup_anon_mail'];
    }
    if ($signup = db_fetch_object(db_query($sql, $args))) {
      $signup->status = $values['signup_status'];
      db_query("UPDATE {signup_log} SET status = %d WHERE sid = %d", $signup->status, $signup->sid);
      _signup_status_change('add', $signup);
    }
  }
}

/**
 * Alter the signup edit form to add a status selector, if available.
 */
function signup_status_form_signup_edit_form_alter(&$form, $form_state) {
  $signup = $form['#signup'];
  $status_element = _signup_status_status_form_element($signup->status);
  if (!empty($status_element)) {
    $form['elements']['signup_status'] = $status_element;
    $form['elements']['save']['#submit'][] = 'signup_status_alter_signup_edit_form_submit';
    $form['elements']['save']['#weight'] = 2;
    $form['elements']['cancel-signup']['#weight'] = 3;
  }
}

/**
 * Handles submission of the altered signup edit form.
 */
function signup_status_alter_signup_edit_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $signup = $form['#signup'];
  if (isset($values['signup_status'])) {
    $signup->status = $values['signup_status'];
    db_query("UPDATE {signup_log} SET status = %d WHERE sid = %d", $signup->status, $signup->sid);
    _signup_status_change('update', $signup);
  }
}

/**
 * Alter the broadcast form to allow broadcasting to just a single status.
 */
function signup_status_form_signup_broadcast_form_alter(&$form, $form_state) {
  $options = array();
  $codes = signup_status_codes();
  $options[-1] = t('- All -');
  foreach ($codes as $cid => $code) {
    $options[$cid] = $code['name'];
  }

  $form['signup_status_codes'] = array(
    '#type' => 'select',
    '#title' => t('Limit recipients'),
    '#description' => t('Send this email to a specific set of users based on signup status.'),
    '#multiple' => TRUE,
    '#options' => $options,
    '#default_value' => -1,
  );
  $form['send']['#weight'] = 10;

  // Overwrite the submit hook, in case the user selects a specific status.
  $form['#validate'][] = 'signup_status_signup_broadcast_form_validate';
  $form['#submit'] = array('signup_status_signup_broadcast_form_submit');
}

/**
 * Validate altered broadcast form.
 */
function signup_status_signup_broadcast_form_validate($form, &$form_state) {
  $codes = $form_state['values']['signup_status_codes'];
  if (!in_array(-1, $codes)) {
    $signups = signup_get_signups($form_state['values']['nid']);
    $count = 0;
    foreach ($signups as $signup) {
      if (in_array($signup->status, $codes)) {
        $count++;
      }
    }
    if (!$count) {
      form_set_error('signup_status_codes', t('No users are signed up with that status.'));
    }
  }
}

/**
 * Handles submission of the altered broadcast form.
 */
function signup_status_signup_broadcast_form_submit($form, &$form_state) {
  global $user;

  if (user_access('administer site configuration')) {
    $from = $form_state['values']['from'];
  }
  else {
    $from = $user->mail;
  }

  $signups = array();
  $codes = $form_state['values']['signup_status_codes'];
  if (!in_array(-1, $codes)) {
    foreach (signup_get_signups($form_state['values']['nid']) as $signup) {
      if (in_array($signup->status, $codes)) {
        $signups[] = $signup;
      }
    }
  }

  signup_send_broadcast($form_state['values']['nid'], $form_state['values']['subject'], $form_state['values']['message'], $from, !empty($form_state['values']['copy']), $signups);
}

//////////////////////////////////////////////////////////////////////////////
// Auxiliary functions

/**
 * Retrieve all available status codes.
 *
 * @return
 *   An array of status code arrays, keyed using the status code id, cid.
 *   Each status code array contains the following keys / values:
 *   - "name": The display name of the status code.
 *   - "description": The long-form description of the status code.
 *   - "mod_signup_count": A boolean value stating whether signups using the
 *     status code should modify the total signup count (i.e. for the "wait
 *     listed" status code).
 *   - "show_on_form": A boolean value stating if this status should be
 *     available on the signup form.
 */
function signup_status_codes() {
  static $codes = array();
  if (empty($codes)) {
    $result = db_query("SELECT * FROM {signup_status_codes}");
    while ($row = db_fetch_array($result)) {
      $codes[$row['cid']] = $row;
    }
  }
  return $codes;
}

/**
 * Fire the hook on the signup status change.
 * @param $action
 *   A string representing signup status change.
 * @param $signup
 *   A signup object.
 */
function _signup_status_change($action, $signup) {
  module_invoke_all('signup_status', $action, $signup);
}

